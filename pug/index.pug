doctype html
html()
  head
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(http-equiv='Content-Type', content='text/html; charset=utf-8;')
    meta(http-equiv='Content-Script-Type', content='text/javascript')
    meta(http-equiv='Content-Style-Type', content='text/css')
    meta(http-equiv='Pragma', content='no-cache')
    meta(name='description', content='')
    link(rel='canonical', href='http://localhost:8888/index')

    link(rel='icon', type='image/png', sizes='16x16', href='/favicon-16x16.png')
    link(rel='icon', type='image/png', sizes='32x32', href='/favicon-32x32.png')
    link(rel='icon', type='image/png', sizes='96x96', href='/favicon-96x96.png')

    link(rel='apple-touch-icon', sizes='57x57', href='/apple-icon-57x57.png')
    link(rel='apple-touch-icon', sizes='60x60', href='/apple-icon-60x60.png')
    link(rel='apple-touch-icon', sizes='72x72', href='/apple-icon-72x72.png')
    link(rel='apple-touch-icon', sizes='76x76', href='/apple-icon-76x76.png')
    link(rel='apple-touch-icon', sizes='114x114', href='/apple-icon-114x114.png')
    link(rel='apple-touch-icon', sizes='120x120', href='/apple-icon-120x120.png')
    link(rel='apple-touch-icon', sizes='144x144', href='/apple-icon-144x144.png')
    link(rel='apple-touch-icon', sizes='152x152', href='/apple-icon-152x152.png')
    link(rel='apple-touch-icon', sizes='180x180', href='/apple-icon-180x180.png')

    link(rel='icon', type='image/png', sizes='192x192', href='/android-icon-192x192.png')
    link(rel='icon', type='image/png', sizes='32x32', href='/favicon-32x32.png')
    link(rel='icon', type='image/png', sizes='96x96', href='/favicon-96x96.png')
    link(rel='icon', type='image/png', sizes='16x16', href='/favicon-16x16.png')
    link(rel='manifest', href='/manifest.json')

    script(type='text/javascript', src="/js/vue2611.js")
    script(type='text/javascript', src="/js/buefy.js")
    script(type='text/javascript', src="/js/axios.js")

    link(rel='stylesheet', href='/css/buefy.css')
    link(rel='stylesheet', href='/css/main.css')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/@mdi/font@5.8.55/css/materialdesignicons.min.css')

    title NONAME

body
  div.h100.flex
    #app
      .tile(style="display:flex;padding-left:5em;")
        //- Component Type 1
        user-tags
      //- Component Type 2
      modal-find-form(v-bind='formProps') 

script(type="text/x-template" id="user-tags")
  .tile
    b-input(v-model="va['아이디']")
    b-input(v-model="va['비밀번호']")

script(type="text/javascript").
  // Server sent parameters. When during sending, object should be changed as Base64 encoded String, JSON String.
  let urlToSendMail = "#{serverSentStringParameterValue}"
  const tableNameGlobal = JSON.parse(decodeURIComponent(escape(atob("#{tableName}"))))

  // Common Utils Function
  function log(str) {
    console.log(str)
  }
  function thread(f) {
    setInterval(f, 3000)
  }
  Array.prototype.isLast = function(obj) {
      if(this[this.length - 1] === obj) return true 
      return false
  }
  
  // Axios Wrapper
  function http(e) {
    function doit(method, url, param, callback) {
      axios[method](url, param, {
      }).then(function (res) {
        console.log("HTTP 응답 res.data=" + JSON.stringify(res.data))
        callback(res.data)
      }).catch((reason) => {
        callback(reason)
      })
    }

    doit(e.method, e.uri, e.param, e.cb)
  }

  // Vue Instance for Event Bus
  const EventBus = new Vue()
  
  // Vue Component Type 1
  let userTags = {
  	template: '#user-tags',
  	data() {
      return {
        va: {
          '아이디':'',
          '비밀번호': '',
        },
      }
    },
    methods: {

    },
    created()
    {
      http([{
          method: 'post', uri:'/getUserDetails', param: {ci:'---'}, cb:(res) => {
          this.va['아이디'] = res.data.id
          this.va['비밀번호'] = res.data.pw
        }
      }])
    },
    mounted()
    {

    }
  }
  
  // Vue Component Type 2
  const ModalFindForm = {
    props: ['data', 'this_', 'condition'],
    methods: {
    },
    template: `
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">검색</p>
          <button
            type="button"
            class="delete"/>
        </header>
        <section class="modal-card-body">
          <div class="tile">
            <span class="m-tb-auto mr form-label">필드끼리의 조건</span>
            <b-select v-model="condition">
              <option
                key="0"
                value = "검색 조건을 선택하세요."
                disabled>
                검색 조건을 선택하세요.
              </option>
              <option
                key="1"
                :value="null">
                또는 포함
              </option>
              <option
                key="2"
                value="그리고 포함">
                그리고 포함
              </option>
            </b-select>
          </div>
          <div style="height:1em"/>
        </section>
        <footer class="modal-card-foot">
            <div class="tile">
              <div class="tile"></div>
              <b-button @click="" label="검색"/>
        </footer>
      </div>
    `,
    created() {
    }
  }
  
  // Global Vue Component setting.
  Vue.component('modal-find-form', ModalFindForm)

  // Main Vue Instance
  let v = new Vue({
      el: '#app',
      components: {
        'userTags': userTags,
      },
      data: {
        formProps: {},
      },
      methods: {
      },
      computed: {
        fnSign: function () {
          return (order, cmd) => {
          }
        }
      },
      created()
      {
        this.formProps = {data: [], this_: this}
      },
      mounted()
      {
        function init() {
        }
        init.bind(this)()
      }
  })
